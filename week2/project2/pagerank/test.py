import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    # Ensures proper usage
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    # Generates dictionary of HTML files
    corpus = crawl(sys.argv[1])
    # Estimates PageRank by sampling
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    # Prints PageRank generated by sampling
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    # Estimates PageRank by iteration
    ranks = iterate_pagerank(corpus, DAMPING)
    # Prints PageRank generated by iteration
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    all_pages = list(corpus.keys() - page)
    probs = dict()
    page_links = list(corpus[page])

    for a_page in all_pages:
        probs.update({a_page: ((1 - damping_factor) / len(all_pages))})

    for link in page_links:
        probs[link] += damping_factor / len(page_links)

    return probs


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    samples = []

    pages = []
    for page in corpus.keys():
        pages.append(page)

    samples.append(pages[random.randint(0, len(pages) - 1)])

    next_probs = transition_model(corpus, samples[-1], damping_factor)

    for i in range(n):
        keys = []
        values = []
        for key, value in next_probs.items():
            keys.append(key)
            values.append(value)
        samples.append(random.choices(keys, weights=values, k=1)[0])

        next_probs = transition_model(corpus, samples[-1], damping_factor)

    dict = {}
    for page in pages:
        dict.update({page: (samples.count(page) / len(samples))})

    return dict


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # Makes new dictionary full of pages and starting probabilities (1/N)
    probs = {}
    for page in corpus.keys():
        probs.update({page: 1 / len(corpus.keys())})
    #Iterates over every page in dict
    for page in probs.keys():
        previous = 2
        current = probs[page]

        # Adjusts values until difference is less than 0.001
        while abs(previous - current) >= 0.001:
            previous = current
            current = probs[page]
            # Finds probability of landing on a page without damping factor
            random_probability = (1 - damping_factor) / len(probs.keys())

            # Finds probability of going to a page via links
            total = 0
            for page, links in corpus.items():
                for link in links:
                    if link == page:
                        total += (probs[page]) / links.keys()

            # Applies dampening factor to probability of going to a page via links
            link_probability = (damping_factor) * total

            # Calculates total probability
            total_probability = random_probability + link_probability

            # Updates probability in dict to total probability
            probs[page] = total_probability

    return probs


if __name__ == "__main__":
    main()